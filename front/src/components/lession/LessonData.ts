// üìò LessonData.ts ‚Äî Banco de li√ß√µes organizado por fases

import f1q1 from "./LessonDataImages/f1q1.jpeg";

// Fase 2
import f2q1 from "./LessonDataImages/f2q1.jpeg";
import f2q2 from "./LessonDataImages/f2q2.jpeg";
import f2q4 from "./LessonDataImages/f2q4.jpeg";


// Fase 3
import f3q3 from "./LessonDataImages/f3q3.jpeg";


// =======================
// üîπ FASE 1
// =======================

// Quest√£o 1 ‚Äì POSCOMP 2009
export const lesson_fase1_q1 = {
  title: "POSCOMP 2009 ‚Äî Aut√¥matos Finitos N√£o Determin√≠sticos",
  
  explanation: `Partindo do estado inicial, um aut√¥mato aceita qualquer caminho que termine em um de seus estados de aceita√ß√£o. 
Neste caso, come√ßa em A e deve terminar em D.
Exemplo de nota√ß√£o: Œ¥(A, x) = Y, l√™-se "estando no estado A, lendo x, vai para Y".`,

  image: f1q1,

  question: "Considere o aut√¥mato finito n√£o-determin√≠stico a seguir. Qual conjunto de transi√ß√µes e estados de aceita√ß√£o descreve corretamente esse aut√¥mato?",

  alternatives: [
    "Estado Inicial A, estados de aceita√ß√£o C e D\nŒ¥(A, b) = B\nŒ¥(B, a) = C\nŒ¥(C, a) = D",
    "Estado Inicial A, estado de aceita√ß√£o C\nŒ¥(A, b) = B\nŒ¥(B, a) = C\nŒ¥(C, a) = C",
    "Estado Inicial A, estado de aceita√ß√£o D\nŒ¥(A, b) = B\nŒ¥(B, a) = D\nŒ¥(B, b) = C\nŒ¥(C, a) = D",
    "Todas as respostas acima est√£o corretas.",
    "√â imposs√≠vel converter esse aut√¥mato finito n√£o determin√≠stico em um aut√¥mato finito determin√≠stico."
  ],

  correctAnswer: 0,

  tags: ["AFNDs", "percorrer caminhos", "AFND sem lambda no incial"]
};

// Quest√£o 2 ‚Äì POSCOMP 2009
export const lesson_fase1_q2 = {
  title: "POSCOMP 2009 ‚Äî Gram√°tica Regular",

  explanation: `Uma gram√°tica regular gera palavras a partir do s√≠mbolo inicial. Cada produ√ß√£o mostra como um s√≠mbolo deriva uma sequ√™ncia de s√≠mbolos terminais ou n√£o-terminais.
Exemplo: S ‚Üí ASb significa "S deriva ASb".`,

  question: "Com base nas regras de produ√ß√£o S ‚Üí ASb | c e A ‚Üí a, qual √© a linguagem gerada por essa gram√°tica?",

  alternatives: [
    "{a‚Åøcb | n ‚àà ‚Ñï}",
    "{acb‚Åø | n ‚àà ‚Ñï}",
    "{a‚Åøc‚Åøb | n ‚àà ‚Ñï}",
    "{a‚Åøcb‚Åø | n ‚àà ‚Ñï}",
    "Nenhuma das respostas anteriores"
  ],

  correctAnswer: 3,
  
  tags: ["Gram√°tica Regular", "deriva√ß√µes"]
};

// Quest√£o 3 ‚Äì POSCOMP 2012
export const lesson_fase1_q3 = {
  title: "POSCOMP 2012 ‚Äî Convers√£o de AFN para AFD",

  explanation: `Ao converter um AFN em AFD, cada estado do AFD representa um subconjunto de estados do AFN. O n√∫mero m√°ximo de estados do AFD √© 2^n, onde n √© o n√∫mero de estados do AFN.`,

  question: "Se um AFN tem 6 estados, qual √© o n√∫mero m√°ximo de estados do AFD resultante, considerando os estados in√∫teis?",

  alternatives: ["12", "36", "64", "1024", "46656"],

  correctAnswer: 2,

  tags: ["AFNDs", "propriedade dos aut√¥matos"]
};

// Quest√£o 4 ‚Äì POSCOMP 2013
export const lesson_fase1_q4 = {
  title: "POSCOMP 2013 ‚Äî Cadeia Vazia e Estado Inicial",

  explanation: `Um aut√¥mato finito aceita qualquer palavra que termine em um de seus estados de aceita√ß√£o. Se o estado inicial tamb√©m for final, ele aceita a cadeia vazia.`,

  question: "Se o estado inicial de um aut√¥mato finito tamb√©m for estado final, o que podemos afirmar sobre esse aut√¥mato?",

  alternatives: [
    "n√£o aceita a cadeia vazia.",
    "n√£o tem outros estados finais.",
    "√© determin√≠stico.",
    "aceita a cadeia vazia.",
    "√© n√£o determin√≠stico."
  ],

  correctAnswer: 3,

  tags: ["AFNDs", "propriedade dos aut√¥matos"]
};

// Quest√£o 5 ‚Äì ENADE 2005
export const lesson_fase1_q5 = {
  title: "ENADE 2005 ‚Äî Express√µes Aritm√©ticas e Gram√°ticas",

  explanation: `As gram√°ticas regulares s√£o usadas para identificar tokens simples, 
  enquanto a gram√°tica livre de contexto define a estrutura da express√£o, como a ordem de 
  preced√™ncia dos operadores. Assim, express√µes aritm√©ticas completas devem ser descritas 
  por uma gram√°tica livre de contexto.`,

  question: `Considere a necessidade de se implementar um componente de software que realiza 
  c√°lculos de express√µes matem√°ticas simples para as opera√ß√µes b√°sicas (soma, subtra√ß√£o, multiplica√ß√£o, 
  divis√£o e exponencia√ß√£o). O software reproduz na tela do computador a entrada, os resultados parciais 
  e o resultado final da express√£o e, ainda, trata os operadores de exponencia√ß√£o, multiplica√ß√£o e divis√£o 
  com preced√™ncia sobre os operadores de soma e subtra√ß√£o. Para obter o referido software, √© correto que o 
  projetista

  I) defina uma cadeia de caracteres para armazenar e imprimir toda a express√£o de entrada.
  II) defina uma gram√°tica regular para identificar as express√µes aritm√©ticas v√°lidas.
  III) defina um reconhecedor de linguagem regular com aut√¥mato finito determin√≠stico.
  IV) especifique a ordem de preced√™ncia dos operadores com uma nota√ß√£o de gram√°tica livre de contexto.
  `,

  alternatives: [
    "defina I e II.",
    "defina III e IV.",
    "defina I, II e IV.",
    "defina I, III e IV.",
    "defina II, III e IV."
  ],

  correctAnswer: 3,

  tags: ["gram√°tica Regular", "propriedades de gram√°tica", "hierarquia de chomsky"]
};

export const lessonsFase1 = [
  lesson_fase1_q1,
  lesson_fase1_q2,
  lesson_fase1_q3,
  lesson_fase1_q4,
  lesson_fase1_q5,
];

// =======================
// üîπ FASE 2
// =======================

// Quest√£o 1 ‚Äì POSCOMP 2008
export const lesson_fase2_q1 = {
  title: "POSCOMP 2008 ‚Äî Aut√¥matos e Cadeias Reconhecidas",

  explanation: `Analise um aut√¥mato finito a partir das cadeias que ele reconhece ou rejeita. Os c√≠rculos em negrito representam estados de aceita√ß√£o.`,

  image: f2q1,

  question: "Observando o aut√¥mato acima, qual das afirmativas sobre reconhecimento de palavras √© FALSA?",

  alternatives: [
    "A palavra aaa √© reconhecida pelo aut√¥mato.",
    "A palavra ababa n√£o √© reconhecida pelo aut√¥mato.",
    "A palavra vazia √© reconhecida pelo aut√¥mato.",
    "A palavra aba √© reconhecida pelo aut√¥mato.",
    "A palavra baba √© reconhecida pelo aut√¥mato."
  ],

  correctAnswer: 3,

  tags:["AFNDs", "percorrer caminhos", "AFND com lambda no incial"]
};

// Quest√£o 2 ‚Äì UFG 2024 (adaptada)
export const lesson_fase2_q2 = {
  title: "UFG 2024 ‚Äî Aut√¥mato JFLAP (Adaptado)",

  explanation: `Um aut√¥mato aceita ou rejeita palavras dependendo de suas transi√ß√µes e estados finais. Analise as transi√ß√µes para determinar quais cadeias s√£o aceitas.`,

  image: f2q2,

  question: "Qual √© a √∫nica cadeia de caracteres aceita pelo aut√¥mato mostrado acima?",

  alternatives: [
    "010000",
    "001011",
    "100110",
    "110101",
    "111000"
  ],

  correctAnswer: 3,

  tags: ["AFNDs", "percorrer caminhos", "AFND sem lambda no incia"]
};

// Quest√£o 3 ‚Äì CESPE 2022
export const lesson_fase2_q3 = {
  title: "CESPE 2022 ‚Äî Aut√¥matos Determin√≠sticos",

  explanation: `Aut√¥matos determin√≠sticos possuem exatamente uma transi√ß√£o para cada s√≠mbolo de entrada a partir de cada estado, enquanto aut√¥matos n√£o determin√≠sticos podem ter m√∫ltiplas op√ß√µes.`,

  question: "Sobre aut√¥matos finitos determin√≠sticos, qual das alternativas descreve corretamente seu comportamento?",

  alternatives: [
    "corresponde √† fun√ß√£o de transi√ß√£o que recebe um estado ou um s√≠mbolo de entrada que sempre retorna um conjunto de estados como resultado.",
    "tem a capacidade de adivinhar algo sobre sua entrada ao testar valores.",
    "pode, para cada entrada, transitar a partir do seu estado atual em um e somente um estado.",
    "permite zero, uma ou n transi√ß√µes para os estados de entrada.",
    "consegue estar em v√°rios estados ao mesmo tempo."
  ],

  correctAnswer: 2,

  tags: ["AFDs", "propriedade dos aut√¥matos"]
};

// Quest√£o 4 ‚Äì POSCOMP 2022 (Adaptada)
export const lesson_fase2_q4 = {
  title: "POSCOMP 2022 ‚Äî Linguagem Aceita por AFD",

  explanation: `Um AFD aceita um conjunto espec√≠fico de palavras. A an√°lise envolve entender o padr√£o das cadeias que passam pelo aut√¥mato e chegam a estados finais.`,

  image: f2q4,

  question: "Qual √© a linguagem aceita pelo aut√¥mato determin√≠stico mostrado acima?",

  alternatives: [
    "L = {awa: w ‚àà {a,b}*}",
    "L = {w ‚àà {a,b}* : |w a| = 1}",
    "L = {w ‚àà {a,b}* : |w a| ‚â• 0}",
    "L = {w ‚àà {a,b}* : |w a| ‚â§ 3}",
    "L = {w ‚àà {a,b}* : |w a| √© par e |w b| ‚â§ 3}"
  ],

  correctAnswer: 2,

  tags: ["AFDs", "percorrer caminhos"]
};

// Quest√£o 5 ‚Äì ENADE 2008
export const lesson_fase2_q5 = {
  title: "ENADE 2008 ‚Äî Tipos de Gram√°tica",

  explanation: `Analise as regras de produ√ß√£o da gram√°tica e sua classifica√ß√£o na hierarquia de Chomsky. Observe quais cadeias s√£o geradas e se existe equival√™ncia com gram√°tica regular.`,

  question: "Considerando a gram√°tica abaixo, qual afirma√ß√£o correta podemos fazer sobre ela?\nS ‚Üí AB\nAB ‚Üí AAB\nA ‚Üí a\nB ‚Üí b",

  alternatives: [
    "A gram√°tica G √© amb√≠gua.",
    "A gram√°tica G √© uma gram√°tica livre de contexto.",
    "A cadeia aabbb √© gerada por essa gram√°tica.",
    "√â poss√≠vel encontrar uma gram√°tica regular equivalente a G.",
    "A gram√°tica G gera a cadeia nula."
  ],

  correctAnswer: 3,

  tags:["Gram√°tica Regular", "deriva√ß√µes", "propriedades das gram√°ticas"]
};

export const lessonsFase2 = [
  lesson_fase2_q1,
  lesson_fase2_q2,
  lesson_fase2_q3,
  lesson_fase2_q4,
  lesson_fase2_q5,
];

// =======================
// üîπ FASE 3
// =======================

// Quest√£o 1 ‚Äì POSCOMP 2011
export const lesson_fase3_q1 = {
  title: "POSCOMP 2011 ‚Äî Gram√°tica Livre de Contexto para Express√£o Regular",

  explanation: `Concatena√ß√£o √© quando um s√≠mbolo √© lido em seguida do outro. Ex: "ab" l√™-se "a" concatenado com "b".
A estrela de Kleene representa a leitura de todas as concatena√ß√µes daquele elemento. Ex: a* = a‚Å∞, a¬π, a¬≤, a¬≥‚Ä¶`,

  question: "Considere a gram√°tica livre de contexto: S ‚Üí aS | Sb | c. Qual express√£o regular gera a mesma linguagem que a gram√°tica definida acima?",

  alternatives: [
    "a*cb*",
    "a+b+c",
    "a+cb+",
    "ca*b*",
    "ca+b+"
  ],

  correctAnswer: 0,

  tags: ["express√£o regular", "an√°lise de cadeia", "estrela de kleene"]
};

// Quest√£o 2 ‚Äì POSCOMP 2022
export const lesson_fase3_q2 = {
  title: "POSCOMP 2022 ‚Äî Gram√°tica Regular para Express√£o Regular",

  explanation: `L(r) significa "L aceita a express√£o r". Uma express√£o regular pode representar os tipos de palavras geradas por uma gram√°tica espec√≠fica.`,

  question: "Dado a gram√°tica regular (G), determine qual √© a express√£o regular (r), tal que L(r) = L(G): S ‚Üí abS | S | a",

  alternatives: [
    "r = (ab)*a",
    "r = aba*",
    "r = a*(ba)",
    "r = (a+b)*a*",
    "r = (ab) + a"
  ],

  correctAnswer: 0,

  tags: ["express√£o regular", "an√°lise de cadeia"]
};

// Quest√£o 3 ‚Äì IFB 2017
export const lesson_fase3_q3 = {
  title: "IFB 2017 ‚Äî Express√µes Regulares e Aut√¥matos",

  explanation: `Observe como cada express√£o regular descreve a necessidade de pelo menos um "1" para alcan√ßar o estado final. Compare o comportamento do aut√¥mato: ele aceita qualquer sequ√™ncia de 0's antes, mas precisa encontrar um 1 obrigat√≥rio para chegar ao estado final.`,

  image: f3q3,

  question: `Leia as afirmativas sobre express√µes regulares associadas ao aut√¥mato da figura:

I) A express√£o regular 0*1(1+00*1)* representa o aut√¥mato da figura.
II) A express√£o regular 0*1*1+11*0*1 representa o aut√¥mato da figura.
III) A express√£o regular (0+1)*1 representa o aut√¥mato da figura.

Assinale somente a alternativa que apresenta todas as afirmativas CORRETAS.`,

  alternatives: [
    "Somente I e II",
    "Somente I e III",
    "Somente II",
    "Somente II e III",
    "Somente I"
  ],

  correctAnswer: 1,

  tags: ["express√£o regular", "an√°lise de cadeia"]
};

// Quest√£o 4 ‚Äì POSCOMP 2003
export const lesson_fase3_q4 = {
  title: "POSCOMP 2003 ‚Äî Gram√°tica para Express√£o Regular",

  explanation: `O s√≠mbolo (|) indica que o s√≠mbolo inicial pode derivar um dos resultados - "ou" um "ou" outro. Analise como os resultados da deriva√ß√£o formam o padr√£o de palavras geradas.`,

  question: `Uma gram√°tica G √© definida por G=({x,y,z},{S,W,X,Y,Z},P,S) onde P s√£o:
S ‚Üí WZ
W ‚Üí X|Y
X ‚Üí x|xX
Y ‚Üí y|yY
Z ‚Üí z|zZ

Qual das express√µes regulares abaixo corresponde a esta gram√°tica?`,

  alternatives: [
    "(xx*|yy*)zz*",
    "xx*|yy*|zz*",
    "xx*(yy*|zz*)",
    "(xx|yy)*zz*",
    "xx*yy*zz*"
  ],

  correctAnswer: 0,

  tags: ["express√£o regular", "an√°lise de cadeia", "estrela de kleene"]
};

// Quest√£o 5 ‚Äì POSCOMP 2009 (Adaptado)
export const lesson_fase3_q5 = {
  title: "POSCOMP 2009 ‚Äî Linguagem com N√∫mero Par de a's",

  explanation: `A linguagem L = {œâ | œâ ‚àà Œ£* e o n√∫mero de a's em œâ √© par} inclui todas as cadeias onde a quantidade de 'a's √© par, incluindo zero.`,

  question: `Seja o alfabeto Œ£ = {a, b} e a linguagem regular L = {œâ | œâ ‚àà Œ£* e o n¬∫ de a's em œâ √© par}. Qual das express√µes regulares abaixo gera essa linguagem?`,

  alternatives: [
    "(a b* a b*)*",
    "((a a)* | b*)*",
    "(b* | (a a)* | b*)*",
    "(b*ab*ab*)*|b*",
    "(a a | b)"
  ],

  correctAnswer: 3,

  tags: ["express√£o regular", "an√°lise de cadeia", "estrela de kleene"]
};

export const lessonsFase3 = [
  lesson_fase3_q1,
  lesson_fase3_q2,
  lesson_fase3_q3,
  lesson_fase3_q4,
  lesson_fase3_q5,
];

// =======================
// üîπ FASE 4
// =======================

// Quest√£o 1 ‚Äì ENADE 2014
export const lesson_fase4_q1 = {
  title: "ENADE 2014 ‚Äî An√°lise de Express√µes Regulares",

  explanation: `Pense na paridade dos a's - a linguagem exige que haja pares de a (0, 2, 4, ...). Construa a express√£o agrupando dois a por vez, permitindo qualquer n√∫mero de b antes, entre e depois desses pares.`,

  question: `Considere as express√µes regulares:
R1 = a*ba*ba*ba*
R2 = a*(a | b)a(a | b)*
R3 = a*ab*a(a | b)
R4 = (a | b)*

Em rela√ß√£o √†s linguagens definidas, conclui-se que a cadeia abbb est√° contida apenas nas linguagens definidas por:`,

  alternatives: [
    "R1 e R4",
    "R2 e R3",
    "R2 e R4",
    "R1 e R3",
    "R2, R3 e R4"
  ],

  correctAnswer: 0,

  tags: ["express√£o regular", "an√°lise de cadeia", "fecho", "estrela de kleene"]
};

// Quest√£o 2 ‚Äì POSCOMP 2014
export const lesson_fase4_q2 = {
  title: "POSCOMP 2014 ‚Äî Descri√ß√£o de Linguagem por Express√£o Regular",

  explanation: `As deriva√ß√µes, mesmo que possam ser geradas infinitamente, devem respeitar a ordem em que est√£o sendo colocadas. Analise o padr√£o estabelecido pela express√£o regular.`,

  question: `Considere a express√£o regular: (c*a[abc]*b[abc]*) | c*. Assinale a alternativa que descreve, corretamente, todas as cadeias geradas por essa express√£o regular.`,

  alternatives: [
    "Cadeias sobre o alfabeto {a,b,c} onde o primeiro a precede o primeiro b",
    "Cadeias sobre o alfabeto {a,b,c} com um n√∫mero par de a's",
    "Cadeias sobre o alfabeto {a,b,c} contendo a substring baa",
    "Cadeias sobre o alfabeto {a,b,c} contendo um n√∫mero √≠mpar de c's",
    "Cadeias sobre o alfabeto {a,b,c} terminadas por c"
  ],

  correctAnswer: 0,

  tags: ["express√£o regular", "an√°lise de cadeia"]
};

// Quest√£o 3 ‚Äì POSCOMP 2015
export const lesson_fase4_q3 = {
  title: "POSCOMP 2015 ‚Äî Uni√£o de Linguagens Regulares",

  explanation: `Observe que R1 gera cadeias que come√ßam com "a" e R2 com "b". Assim, suas linguagens s√£o diferentes, mas juntas cobrem todas as cadeias n√£o vazias do alfabeto {a, b}.`,

  question: `Considere as express√µes regulares sobre o alfabeto {a, b}:
R1 = a(a ‚à™ b)*
R2 = b(a ‚à™ b)*

Se L(R) √© a linguagem associada a uma express√£o regular R, √© correto afirmar que:`,

  alternatives: [
    "L(R1) = L(R2)",
    "L(R2) = {w | w termina com b}",
    "existe um aut√¥mato finito determin√≠stico cuja linguagem √© igual a L(R1) ‚à™ L(R2)",
    "se R3 √© uma express√£o regular tal que L(R3) = L(R1) ‚à© L(R2), ent√£o L(R3) √© uma linguagem infinita",
    "um aut√¥mato finito n√£o determin√≠stico que reconhe√ßa L(R1) ‚à™ L(R2) tem, pelo menos, quatro estados"
  ],

  correctAnswer: 2,

  tags: ["express√£o regular", "an√°lise de cadeia", "fechos", "uni√£o", "interse√ß√£o", "estrela de kleene"]
};

// Quest√£o 4 ‚Äì POSCOMP 2003
export const lesson_fase4_q4 = {
  title: "POSCOMP 2003 ‚Äî Propriedades de Aut√¥matos e Express√µes Regulares",

  explanation: `Antes de decidir, relembre o que cada conceito realmente significa. AFD e AFND reconhecem a mesma classe de linguagens (as regulares), e toda express√£o regular pode ser convertida em um aut√¥mato finito.`,

  question: `Considere as afirma√ß√µes sobre aut√¥matos finitos e express√µes regulares:

I. A classe de linguagens aceita por um AFD n√£o √© a mesma que um AFND.
II. Para algumas express√µes regulares n√£o √© poss√≠vel construir um AFD.
III. A express√£o regular (b+ba)+ aceita os strings de b's e a's come√ßando com b e n√£o tendo dois a's consecutivos.

Selecione a afirmativa correta:`,

  alternatives: [
    "As afirmativas I e II s√£o verdadeiras",
    "As afirmativas I e III s√£o falsas",
    "Apenas a afirmativa III √© verdadeira",
    "As afirmativas II e III s√£o falsas",
    "As afirmativas I e III s√£o verdadeiras"
  ],

  correctAnswer: 2,

  tags: ["AFDs", "AFNDs", "express√£o regular"]
};

// Quest√£o 5 ‚Äì POSCOMP 2005
export const lesson_fase4_q5 = {
  title: "POSCOMP 2005 ‚Äî Linguagem com Restri√ß√£o de Ocorr√™ncia",

  explanation: `Œ£ representa o alfabeto, assim Œ£* representa todas as combina√ß√µes poss√≠veis para aquele alfabeto. Analise uma express√£o que garanta a ordem de a's seguido de b's de modo que independente do tamanho siga este padr√£o.`,

  question: `Seja Œ£ = {a, b}. Uma express√£o regular denotando a linguagem L = {w ‚àà Œ£* tal que toda ocorr√™ncia de "a" em w √© imediatamente seguida de "b"} √©:`,

  alternatives: [
    "(a*b)*",
    "(b+ab)*",
    "a*b",
    "b+(ab)*",
    "(ab)*"
  ],

  correctAnswer: 1,

  tags: ["express√£o regular", "an√°lise de cadeia", "padr√£o de ocorr√™ncia"]
};

export const lessonsFase4 = [
  lesson_fase4_q1,
  lesson_fase4_q2,
  lesson_fase4_q3,
  lesson_fase4_q4,
  lesson_fase4_q5,
];


// =======================
// üîπ FASE 5 - Lema do Bombeamento
// =======================

// Quest√£o 1 ‚Äì Sipser Exemplo 1.73
export const lesson_fase5_q1 = {
  title: "Sipser Exemplo 1.73 ‚Äî Lema do Bombeamento para {0‚Åø1‚Åø}",

  explanation: `O Lema do Bombeamento √© usado para provar que linguagens n√£o s√£o regulares. Para uma linguagem ser regular, deve existir um n√∫mero de bombeamento p tal que qualquer string s com |s| ‚â• p possa ser dividida em xyz satisfazendo as condi√ß√µes do lema.`,

  question: `Complete a prova usando o Lema do Bombeamento para mostrar que A = {0‚Åø1‚Åø | n ‚â• 0} n√£o √© regular:

Prova:
Suponha, para fins de contradi√ß√£o, que A √© _______ (1).
Pelo lema do bombeamento, existe um n√∫mero p chamado _______ (2), tal que toda string s ‚àà A com |s| ‚â• p pode ser decomposta como s = xyz, com |xy| ‚â§ p, |y| > 0 e para todo i ‚â• 0, xy‚Å±z ‚àà A.

Escolhemos s = _______ (3). Essa string pertence a A e possui comprimento maior que p.

Analisemos as poss√≠veis formas de y:

1. Caso 1: y cont√©m apenas o s√≠mbolo _______ (4).
   Ao bombear (i=2), obtemos xyyz, que ter√° mais 0s que 1s.

2. Caso 2: y cont√©m apenas o s√≠mbolo _______ (5).
   O bombeamento produz uma string com mais 1s que 0s.

3. Caso 3: y cont√©m tanto 0s quanto 1s.
   Ao bombear, a string xyyz ter√° os 1s fora de ordem, quebrando o formato _______ (6).

Em todos os casos, ocorre contradi√ß√£o. Logo, A n√£o √© regular.`,

  alternatives: [
    "(1) regular; (2) comprimento de bombeamento; (3) 0·µñ1·µñ; (4) 0; (5) 1; (6) todos os 0s seguidos de todos os 1s",
    "(1) livre de contexto; (2) limite superior; (3) 0·µñ1·µñ; (4) 0; (5) 1; (6) balanceado",
    "(1) regular; (2) comprimento m√≠nimo; (3) 1·µñ0·µñ; (4) 1; (5) 0; (6) com igual n√∫mero de 0s e 1s",
    "(1) recursiva; (2) comprimento de bombeamento; (3) 0·µñ1·µñ; (4) 0; (5) 1; (6) com prefixo 0 e sufixo 1"
  ],

  correctAnswer: 0,

  tags: ["lema do bombeamento", "linguagem n√£o regular", "0n1n"]
};

// Quest√£o 2 ‚Äì Sipser Exemplo 1.75
export const lesson_fase5_q2 = {
  title: "Sipser Exemplo 1.75 ‚Äî Lema do Bombeamento para {ww}",

  explanation: `A linguagem B = {ww | w ‚àà {0,1}*} cont√©m strings que s√£o duplicatas de alguma string w. O Lema do Bombeamento pode mostrar que essa linguagem n√£o √© regular atrav√©s de uma escolha cuidadosa da string s.`,

  question: `Complete a prova usando o Lema do Bombeamento para mostrar que B = {ww | w ‚àà {0,1}*} n√£o √© regular:

Prova:
Suponha que B √© regular. Pelo lema do bombeamento, existe p tal que toda string s ‚àà B com |s| ‚â• p pode ser decomposta como s = xyz, com |xy| ‚â§ p, |y| > 0 e para todo i ‚â• 0, xy‚Å±z ‚àà B.

Escolhemos s = _______ (1). Essa string pertence a B e tem comprimento maior que p.

A _______ (2) (que diz que xy‚Å±z ‚àà B para todo i ‚â• 0) ser√° crucial, pois sem ela poder√≠amos bombear s escolhendo x e z vazios.

No entanto, com essa condi√ß√£o, a prova segue porque y deve conter apenas _______ (3).

Se bombearmos (i=2), obtemos xyyz, que n√£o pertence a B, pois a estrutura _______ (4) de ww √© quebrada.

Escolhemos 0·µñ10·µñ1 para capturar a "ess√™ncia" da n√£o regularidade de B. Se tiv√©ssemos escolhido 0·µñ0·µñ, ela poderia ser _______ (5) sem violar a forma B.

Portanto, obtemos uma contradi√ß√£o, e conclu√≠mos que B n√£o √© _______ (6).`,

  alternatives: [
    "(1) 0·µñ10·µñ1; (2) condi√ß√£o 3; (3) 0s; (4) duplicada; (5) bombeada; (6) regular",
    "(1) 0·µñ1·µñ; (2) condi√ß√£o 2; (3) 1s; (4) balanceada; (5) dividida; (6) livre de contexto",
    "(1) 1·µñ01·µñ0; (2) condi√ß√£o 1; (3) 0s e 1s; (4) sim√©trica; (5) comprimida; (6) recursiva",
    "(1) 0·µñ0·µñ; (2) condi√ß√£o 3; (3) 0s; (4) duplicada; (5) bombeada; (6) regular"
  ],

  correctAnswer: 0,

  tags: ["lema do bombeamento", "linguagem n√£o regular", "ww"]
};

// Quest√£o 3 ‚Äì Sipser Exemplo 1.77
export const lesson_fase5_q3 = {
  title: "Sipser Exemplo 1.77 ‚Äî Lema do Bombeamento para {0‚Å±1 ≤ | i > j}",

  explanation: `A linguagem C = {0‚Å±1 ≤ | i > j} cont√©m strings onde o n√∫mero de 0s √© estritamente maior que o n√∫mero de 1s. O bombeamento para baixo (i=0) √© frequentemente √∫til para linguagens que envolvem rela√ß√µes de quantidade entre s√≠mbolos.`,

  question: `Complete a prova usando o Lema do Bombeamento para mostrar que C = {0‚Å±1 ≤ | i > j} n√£o √© regular:

Prova:
Suponha que C √© regular. Pelo lema do bombeamento, existe p tal que toda string s ‚àà C com |s| ‚â• p pode ser decomposta como s = xyz, com |xy| ‚â§ p, |y| > 0 e para todo i ‚â• 0, xy‚Å±z ‚àà C.

Escolhemos _______ (1). Essa string est√° em C porque possui exatamente um 0 a mais que o n√∫mero de 1s.

Pelo lema, s pode ser decomposta como xyz. Como |xy| ‚â§ p, a parte y cont√©m apenas o s√≠mbolo _______ (2).

Primeiro, tentemos bombear para cima (i=2): o n√∫mero de 0s aumenta, mas xy¬≤z ainda est√° em C. Nenhuma contradi√ß√£o ocorre.

Agora, consideremos o caso _______ (3) bombeando para baixo. A string resultante √© xy‚Å∞z = xz, que tem menos 0s que s.

Como s tinha apenas um 0 a mais que 1s, a string xz passa a ter _______ (4). Portanto, xz ‚àâ C, o que contradiz a _______ (5).

Assim, chegamos a uma contradi√ß√£o. Logo, C n√£o √© _______ (6).`,

  alternatives: [
    "(1) 0·µñ‚Å∫¬π1·µñ; (2) 0; (3) i = 0; (4) o mesmo n√∫mero de 0s e 1s; (5) condi√ß√£o 3; (6) regular",
    "(1) 0·µñ1·µñ; (2) 1; (3) i = 1; (4) mais 1s que 0s; (5) condi√ß√£o 2; (6) livre de contexto",
    "(1) 0·µñ1·µñ‚Åª¬π; (2) 0; (3) i = 2; (4) menos 0s que 1s; (5) condi√ß√£o 1; (6) recursiva",
    "(1) 1·µñ0·µñ‚Å∫¬π; (2) 1; (3) i = 0; (4) o mesmo n√∫mero de 0s e 1s; (5) condi√ß√£o 3; (6) regular"
  ],

  correctAnswer: 0,

  tags: ["lema do bombeamento", "linguagem n√£o regular", "bombeamento para baixo", "0i1j"]
};


export const lessonsFase5 = [
  lesson_fase5_q1,
  lesson_fase5_q2,
  lesson_fase5_q3,
];