export const lessonsData = [
  //n√≥ 1
  {
    id: 1,
    title: "Bubble Sort",
    questions: [
      {
        question: "Qual √© o princ√≠pio b√°sico do Bubble Sort?",
        alternatives: [
          "Trocar pares de elementos adjacentes fora de ordem",
          "Dividir o array em metades e mesclar",
          "Escolher um piv√¥ e particionar",
          "Construir uma √°rvore de heap"
        ],
        correctAnswer: 0,
        explanation:
          "O Bubble Sort funciona trocando repetidamente pares de elementos adjacentes fora de ordem at√© que toda a lista esteja ordenada."
      },

      {
        question: "A complexidade de tempo m√©dia do Bubble Sort √©:",
        alternatives: ["O(n)", "O(n log n)", "O(n¬≤)", "O(1)"],
        correctAnswer: 2,
        explanation:
          "O Bubble Sort precisa comparar todos os pares adjacentes em m√∫ltiplas passagens, resultando em uma complexidade m√©dia de O(n¬≤)."
      },
      {
        question: "O Bubble Sort √© mais eficiente para:",
        alternatives: [
          "Grandes conjuntos de dados",
          "Pequenos conjuntos quase ordenados",
          "Dados aleat√≥rios de tamanho infinito",
          "Processos em tempo real"
        ],
        correctAnswer: 1,
        explanation:
          "O Bubble Sort √© simples, mas ineficiente em grandes volumes. √â mais indicado para listas pequenas ou quase ordenadas."
      },
      {
        question: "O Bubble Sort realiza trocas at√©:",
        alternatives: [
          "O primeiro elemento estar correto",
          "Nenhuma troca ocorrer em uma passada",
          "O piv√¥ estar na posi√ß√£o final",
          "Todos os elementos serem diferentes"
        ],
        correctAnswer: 1,
        explanation:
          "O algoritmo termina quando passa por todo o vetor sem realizar nenhuma troca, indicando que os elementos est√£o ordenados."
      },
      {
        question: "Quantas passagens o Bubble Sort realiza em um vetor de tamanho n?",
        alternatives: ["n", "n-1", "n/2", "log n"],
        correctAnswer: 1,
        explanation:
          "O Bubble Sort realiza n‚àí1 passagens completas para garantir que todos os elementos estejam na posi√ß√£o correta."
      }
    ]
  },

  //n√≥ 2
  {
    id: 2,
    title: "Insertion Sort",
    questions: [
      {
        question: "Qual √© a ideia central do Insertion Sort?",
        alternatives: [
          "Dividir o vetor em metades e mesclar",
          "Inserir cada elemento na posi√ß√£o correta de uma parte j√° ordenada",
          "Trocar pares adjacentes fora de ordem",
          "Usar um piv√¥ e particionar os elementos"
        ],
        correctAnswer: 1,
        explanation:
          "O Insertion Sort constr√≥i uma parte ordenada do vetor e insere cada novo elemento na posi√ß√£o correta dentro dela."
      },
      {
        question: "A complexidade de tempo m√©dia do Insertion Sort √©:",
        alternatives: ["O(n)", "O(n log n)", "O(n¬≤)", "O(1)"],
        correctAnswer: 2,
        explanation:
          "No pior e no caso m√©dio, o Insertion Sort realiza compara√ß√µes e deslocamentos para cada elemento, resultando em O(n¬≤)."
      },
      {
        question: "O Insertion Sort √© mais eficiente para:",
        alternatives: [
          "Vetores grandes e aleat√≥rios",
          "Vetores pequenos ou quase ordenados",
          "Vetores com muitos n√∫meros iguais",
          "Processos paralelos"
        ],
        correctAnswer: 1,
        explanation:
          "O Insertion Sort √© excelente para listas pequenas ou quase ordenadas, pois requer poucas movimenta√ß√µes nesses casos."
      },
      {
        question: "Durante a execu√ß√£o, o Insertion Sort compara o elemento atual com:",
        alternatives: [
          "Apenas o √∫ltimo elemento",
          "Todos os elementos anteriores at√© encontrar sua posi√ß√£o",
          "O primeiro e o √∫ltimo elemento",
          "O menor elemento do vetor"
        ],
        correctAnswer: 1,
        explanation:
          "Cada elemento √© comparado com todos os anteriores at√© encontrar a posi√ß√£o correta para ser inserido."
      },
      {
        question: "O Insertion Sort √© considerado um algoritmo:",
        alternatives: [
          "Inst√°vel e recursivo",
          "Est√°vel e iterativo",
          "Recursivo e r√°pido",
          "Paralelo e n√£o determin√≠stico"
        ],
        correctAnswer: 1,
        explanation:
          "O Insertion Sort √© um algoritmo est√°vel (n√£o muda a ordem de iguais) e iterativo, com implementa√ß√£o simples e direta."
      }
    ]
  },
  
  // quest√£o 3 ‚Äî Automato
  {
    id: 3,
    title: "Aut√¥mato: Reconhecendo 'ab'",
    questions: [
      {
        isAutomaton: true, // üîπ Indica que √© uma li√ß√£o interativa
        question: "Construa um aut√¥mato que reconhe√ßa todas as cadeias que cont√™m a substring 'ab'.",
        correctAutomaton: {
          estados: [
            { id: 1, nome: "q0", isInicial: true, isFinal: false },
            { id: 2, nome: "q1", isInicial: false, isFinal: false },
            { id: 3, nome: "q2", isInicial: false, isFinal: true }
          ],
          conexoes: [
            { de: 1, para: 1, caractere: "b" },
            { de: 1, para: 2, caractere: "a" },
            { de: 2, para: 3, caractere: "b" },
            { de: 2, para: 2, caractere: "a" },
            { de: 3, para: 3, caractere: "a" },
            { de: 3, para: 3, caractere: "b" }
          ]
        },
        explanation: `
          O aut√¥mato deve reconhecer todas as cadeias que contenham o padr√£o 'ab'.
          - **q0** √© o estado inicial, representando que ainda n√£o encontramos um 'a'.
          - **q1** representa que j√° lemos um 'a'.
          - **q2** √© o estado final, alcan√ßado quando encontramos o padr√£o 'ab'.

          Transi√ß√µes:
          - De q0, lendo 'a' ‚Üí vai para q1.
          - De q0, lendo 'b' ‚Üí permanece em q0.
          - De q1, lendo 'a' ‚Üí permanece em q1.
          - De q1, lendo 'b' ‚Üí vai para q2 (achamos 'ab').
          - De q2, lendo 'a' ou 'b' ‚Üí permanece em q2.
        `
      }
    ]
  }

]
