"use client"

import type React from "react"
import { useState } from "react"
import Sidebar from "../../components/sidebar/Sidebar.tsx"
import Task from "../../components/Task/Taks.tsx"
import Lesson from "../../components/lession/Lession"
import "./Path_player.css"

const Path_player: React.FC = () => {
  const [activeNavItem, setActiveNavItem] = useState("journey")
  const [isTaskOpen, setIsTaskOpen] = useState(false)
  const [selectedTask, setSelectedTask] = useState<any>(null)
  const [isLessonActive, setIsLessonActive] = useState(false)

  const navigator = (item: string) => {
    setActiveNavItem(item)
    console.log(`[v0] Navigating to: ${item}`)
  }

  // Alterando as informa√ß√µes da tarefa para o tema de aut√¥matos
  const taskData = {
    icon: "üß†",
    title: "Introdu√ß√£o aos Aut√¥matos Finitos Determin√≠sticos",
    description: "Entenda o que s√£o aut√¥matos finitos determin√≠sticos (DFA) e como eles funcionam.",
    difficulty: "Intermedi√°rio",
    xp: 15,
    progress: 60,
    learningPoints: [
      "Estrutura e funcionamento de aut√¥matos finitos determin√≠sticos",
      "Transi√ß√µes e estados em aut√¥matos",
      "Reconhecimento de padr√µes com DFA",
      "Exemplo de implementa√ß√£o de DFA em JavaScript"
    ],
  }

  const handleNodeClick = () => {
    setSelectedTask(taskData)
    setIsTaskOpen(true)
  }

  const handleCloseTask = () => {
    setIsTaskOpen(false)
    setSelectedTask(null)
  }

  const handleStartLesson = () => {
    console.log("[v0] Starting lesson...")
    setIsLessonActive(true)
    handleCloseTask()
  }

  const handleExitLesson = () => {
    setIsLessonActive(false)
  }

  const handleLessonComplete = () => {
    setIsLessonActive(false)
    // Add logic to mark node as completed, update progress, etc.
  }

  // Alterando as informa√ß√µes da li√ß√£o para o tema de aut√¥matos
  const lessonData = {
    title: "Introdu√ß√£o aos Aut√¥matos Finitos Determin√≠sticos",
    content:
      "Aut√¥matos finitos determin√≠sticos (DFA) s√£o m√°quinas te√≥ricas que podem ser usadas para reconhecer padr√µes em uma sequ√™ncia de s√≠mbolos. Eles possuem um n√∫mero finito de estados e transi√ß√µes determin√≠sticas baseadas em um alfabeto.",
    explanation:
      "Um DFA possui um conjunto de estados, um alfabeto de entrada, uma fun√ß√£o de transi√ß√£o determin√≠stica e um estado inicial. A cada s√≠mbolo lido da entrada, o DFA transita entre seus estados, eventualmente aceitando ou rejeitando a entrada dependendo do estado final.",
    question: "Qual das alternativas √© verdadeira sobre um aut√¥mato finito determin√≠stico?",
    alternatives: [
      "Um DFA pode ter transi√ß√µes n√£o determin√≠sticas.",
      "Um DFA tem um n√∫mero infinito de estados.",
      "Um DFA pode ser usado para reconhecer apenas linguagens regulares.",
      "Um DFA n√£o pode ter um estado inicial."
    ],
    correctAnswer: 2,
  }

  if (isLessonActive) {
    return <Lesson lessonData={lessonData} onComplete={handleLessonComplete} onExit={handleExitLesson} />
  }

  return (
    <div className="app-container">
      <Sidebar activeItem={activeNavItem} onNavigate={navigator} />

      {/* Main Content */}
      <div className="main-content">
        {/* Header */}
        <div className="content-header">
          <button className="back-button">‚Üê</button>
          <div className="header-info">
            <h2>Sess√£o 1, Cap√≠tulo 1 </h2>
            <p>Fundamentos dos Aut√¥matos Finitos Determin√≠sticos</p>
          </div>
        </div>

        {/* Learning Path */}
        <div className="learning-path">
          <div className="path-title">Aut√¥matos Finitos Determin√≠sticos</div>

          <div className="path-nodes">
            <div className="path-node completed" onClick={handleNodeClick}>
              <div className="node-circle">
                <span className="checkmark">‚úì</span>
              </div>
            </div>

            <div className="path-connector"></div>

            <div className="path-node completed" onClick={handleNodeClick}>
              <div className="node-circle">
                <span className="checkmark">‚úì</span>
              </div>
            </div>

            <div className="path-connector"></div>

            <div className="path-node completed" onClick={handleNodeClick}>
              <div className="node-circle">
                <span className="checkmark">‚úì</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Right Sidebar */}
      <div className="right-sidebar">
        {/* Stats */}
        <div className="stats">
          <div className="stat-item green">
            <span className="stat-icon">üî•</span>
            <span className="stat-number">0</span>
          </div>
          <div className="stat-item orange">
            <span className="stat-icon">üíé</span>
            <span className="stat-number">9</span>
          </div>
          <div className="stat-item purple">
            <span className="stat-icon">‚ö°</span>
            <span className="stat-number">5</span>
          </div>
        </div>

        {/* Leaderboard */}
        <div className="widget">
          <div className="widget-header">
            <h3>A√ß√µes R√°pidas</h3>
          </div>
          <div className="widget-content">
            <button className="action-btn">Praticar √Åreas de Aut√¥matos</button>
            <button className="action-btn">Rever Erros</button>
            <button className="action-btn">Quizz de DFA</button>
          </div>
        </div>

        {/* Daily Goals */}
        <div className="widget">
          <div className="widget-header">
            <h3>Atividades Recentes</h3>
          </div>
          <div className="widget-content">
            <div className="goal-item">
              <div className="goal-text">
                <span>Complete 5 li√ß√µes</span>
                <span className="goal-progress">0/5</span>
              </div>
              <span className="trophy-icon">üèÜ</span>
            </div>
            <div className="goal-item">
              <div className="goal-text">
                <span>Complete 3 li√ß√µes na primeira tentativa</span>
                <span className="goal-progress">0/3</span>
              </div>
              <span className="trophy-icon">üèÜ</span>
            </div>
          </div>
        </div>
      </div>

      {selectedTask && (
        <Task isOpen={isTaskOpen} onClose={handleCloseTask} taskData={selectedTask} onStartLesson={handleStartLesson} />
      )}
    </div>
  )
}

export default Path_player
