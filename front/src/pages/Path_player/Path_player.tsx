"use client"

import type React from "react"
import { useState } from "react"
import Sidebar from "../../components/sidebar/Sidebar.tsx"
import Task from "../../components/Task/Taks.tsx"
import Lesson from "../../components/lession/LessonTemplate.tsx"
import "./Path_player.css"

const Path_player: React.FC = () => {
  const [activeNavItem, setActiveNavItem] = useState("journey")
  const [isTaskOpen, setIsTaskOpen] = useState(false)
  const [selectedTask, setSelectedTask] = useState<any>(null)
  const [isLessonActive, setIsLessonActive] = useState(false)
  const [currentLessonType, setCurrentLessonType] = useState<"normal" | "automaton">("normal") // Novo estado

  const navigator = (item: string) => {
    setActiveNavItem(item)
    console.log(`[v0] Navigating to: ${item}`)
  }

  // Alterando as informa√ß√µes da tarefa para o tema de aut√¥matos
  const taskData = {
    icon: "üß†",
    title: "Introdu√ß√£o aos Aut√¥matos Finitos Determin√≠sticos",
    description: "Entenda o que s√£o aut√¥matos finitos determin√≠sticos (DFA) e como eles funcionam.",
    difficulty: "Intermedi√°rio",
    xp: 15,
    progress: 60,
    learningPoints: [
      "Estrutura e funcionamento de aut√¥matos finitos determin√≠sticos",
      "Transi√ß√µes e estados em aut√¥matos",
      "Reconhecimento de padr√µes com DFA",
      "Exemplo de implementa√ß√£o de DFA em JavaScript"
    ],
  }

  const handleNodeClick = () => {
    setSelectedTask(taskData)
    setIsTaskOpen(true)
  }

  const handleCloseTask = () => {
    setIsTaskOpen(false)
    setSelectedTask(null)
  }

  const handleStartLesson = () => {
    console.log("[v0] Starting lesson...")
    setIsLessonActive(true)
    handleCloseTask()
  }

  // NOVA FUN√á√ÉO: Iniciar li√ß√£o de aut√¥mato
  const handleStartAutomatonLesson = () => {
    console.log("[v0] Starting automaton lesson...")
    setCurrentLessonType("automaton")
    setIsLessonActive(true)
    handleCloseTask()
  }

  const handleExitLesson = () => {
    setIsLessonActive(false)
    setCurrentLessonType("normal") // Resetar para o tipo normal ao sair
  }

  const handleLessonComplete = () => {
    setIsLessonActive(false)
    setCurrentLessonType("normal") // Resetar para o tipo normal ao completar
    // Add logic to mark node as completed, update progress, etc.
  }

  const handleIncorrectAnswer = () => {
    // L√≥gica para quando a resposta estiver incorreta
    console.log("Resposta incorreta - fornecer feedback adicional")
  }

  // Alterando as informa√ß√µes da li√ß√£o para o tema de aut√¥matos
  const lessonData = {
    title: "Introdu√ß√£o aos Aut√¥matos Finitos Determin√≠sticos",
    content:
      "Aut√¥matos finitos determin√≠sticos (DFA) s√£o m√°quinas te√≥ricas que podem ser usadas para reconhecer padr√µes em uma sequ√™ncia de s√≠mbolos. Eles possuem um n√∫mero finito de estados e transi√ß√µes determin√≠sticas baseadas em um alfabeto.",
    explanation:
      "Um DFA possui um conjunto de estados, um alfabeto de entrada, uma fun√ß√£o de transi√ß√£o determin√≠stica e um estado inicial. A cada s√≠mbolo lido da entrada, o DFA transita entre seus estados, eventualmente aceitando ou rejeitando a entrada dependendo do estado final.",
    question: "Qual das alternativas √© verdadeira sobre um aut√¥mato finito determin√≠stico?",
    alternatives: [
      "Um DFA pode ter transi√ß√µes n√£o determin√≠sticas.",
      "Um DFA tem um n√∫mero infinito de estados.",
      "Um DFA pode ser usado para reconhecer apenas linguagens regulares.",
      "Um DFA n√£o pode ter um estado inicial."
    ],
    correctAnswer: 2,
  }

  // Dados espec√≠ficos para a li√ß√£o de aut√¥mato
  const automatonLessonData = {
    title: "Constru√ß√£o de Aut√¥mato Finito Determin√≠stico",
    content:
      "Nesta li√ß√£o pr√°tica, voc√™ ir√° construir um aut√¥mato finito determin√≠stico arrastando estados e criando transi√ß√µes.",
    explanation:
      "Use os 8 estados dispon√≠veis (1, 2, 3, 1,2, 1,3, 2,3, 1,2,3) para construir seu aut√¥mato. Marque o estado inicial com a seta (‚Üí) e os estados finais com o c√≠rculo duplo (‚¶ª). Crie transi√ß√µes entre os estados e defina os caracteres de transi√ß√£o.",
    question: "Construa o aut√¥mato finito determin√≠stico conforme as instru√ß√µes:",
    alternatives: [
      "Estado 1 como inicial",
      "Estado 1,2,3 como final", 
      "Transi√ß√µes com caracteres 'a' e 'b'",
      "Todos os estados conectados adequadamente"
    ],
    correctAnswer: 0,
  }

  if (isLessonActive) {
    return (
      <Lesson 
        lessonData={currentLessonType === "automaton" ? automatonLessonData : lessonData} 
        onComplete={handleLessonComplete} 
        onExit={handleExitLesson}
        onIncorrect={handleIncorrectAnswer}
        isAutomaton={currentLessonType === "automaton"} // Passando o par√¢metro isAutomaton
      />
    )
  }

  return (
    <div className="app-container">
      <Sidebar activeItem={activeNavItem} onNavigate={navigator} />

      {/* Main Content */}
      <div className="main-content">
        {/* Header */}
        <div className="content-header">
          <button className="back-button">‚Üê</button>
          <div className="header-info">
            <h2>Sess√£o 1, Cap√≠tulo 1 </h2>
            <p>Fundamentos dos Aut√¥matos Finitos Determin√≠sticos</p>
          </div>
        </div>

        {/* Learning Path */}
        <div className="learning-path">
          <div className="path-title">Aut√¥matos Finitos Determin√≠sticos</div>

          <div className="path-nodes">
            {/* N√≥ 1 - Li√ß√£o Normal */}
            <div className="path-node completed" onClick={handleNodeClick}>
              <div className="node-circle">
                <span className="checkmark">‚úì</span>
              </div>
              <div className="node-label">Teoria B√°sica</div>
            </div>

            <div className="path-connector"></div>

            {/* N√≥ 2 - Li√ß√£o Normal */}
            <div className="path-node completed" onClick={handleNodeClick}>
              <div className="node-circle">
                <span className="checkmark">‚úì</span>
              </div>
              <div className="node-label">Exemplos</div>
            </div>

            <div className="path-connector"></div>

            {/* N√≥ 3 - Li√ß√£o de Aut√¥mato (Pr√°tica) */}
            <div className="path-node active" onClick={() => {
              setSelectedTask({
                ...taskData,
                title: "Pr√°tica: Constru√ß√£o de Aut√¥mato",
                description: "Construa seu pr√≥prio aut√¥mato finito determin√≠stico arrastando estados e criando transi√ß√µes.",
                learningPoints: [
                  "Arraste e posicione os 8 estados dispon√≠veis",
                  "Defina estado inicial e estados finais",
                  "Crie transi√ß√µes entre estados",
                  "Configure caracteres de transi√ß√£o"
                ]
              })
              setIsTaskOpen(true)
            }}>
              <div className="node-circle">
                <span className="node-icon">‚ö°</span>
              </div>
              <div className="node-label">Pr√°tica Interativa</div>
            </div>

            <div className="path-connector"></div>

            {/* N√≥ 4 - Quiz */}
            <div className="path-node upcoming" onClick={handleNodeClick}>
              <div className="node-circle">
                <span className="node-icon">?</span>
              </div>
              <div className="node-label">Quiz Final</div>
            </div>
          </div>
        </div>

        {/* Bot√£o de A√ß√£o R√°pida para Aut√¥mato */}
        <div className="quick-actions">
          <button 
            className="automaton-quick-btn"
            onClick={handleStartAutomatonLesson}
          >
            üéÆ Iniciar Pr√°tica de Aut√¥mato
          </button>
        </div>
      </div>

      {/* Right Sidebar */}
      <div className="right-sidebar">
        {/* Stats */}
        <div className="stats">
          <div className="stat-item green">
            <span className="stat-icon">üî•</span>
            <span className="stat-number">0</span>
          </div>
          <div className="stat-item orange">
            <span className="stat-icon">üíé</span>
            <span className="stat-number">9</span>
          </div>
          <div className="stat-item purple">
            <span className="stat-icon">‚ö°</span>
            <span className="stat-number">5</span>
          </div>
        </div>

        {/* Leaderboard */}
        <div className="widget">
          <div className="widget-header">
            <h3>A√ß√µes R√°pidas</h3>
          </div>
          <div className="widget-content">
            <button 
              className="action-btn"
              onClick={handleStartAutomatonLesson}
            >
              Praticar Constru√ß√£o de Aut√¥matos
            </button>
            <button className="action-btn">Rever Erros</button>
            <button className="action-btn">Quizz de DFA</button>
          </div>
        </div>

        {/* Daily Goals */}
        <div className="widget">
          <div className="widget-header">
            <h3>Atividades Recentes</h3>
          </div>
          <div className="widget-content">
            <div className="goal-item">
              <div className="goal-text">
                <span>Complete 5 li√ß√µes</span>
                <span className="goal-progress">0/5</span>
              </div>
              <span className="trophy-icon">üèÜ</span>
            </div>
            <div className="goal-item">
              <div className="goal-text">
                <span>Complete 3 li√ß√µes na primeira tentativa</span>
                <span className="goal-progress">0/3</span>
              </div>
              <span className="trophy-icon">üèÜ</span>
            </div>
            <div className="goal-item">
              <div className="goal-text">
                <span>Construa um aut√¥mato completo</span>
                <span className="goal-progress">0/1</span>
              </div>
              <span className="trophy-icon">üéÆ</span>
            </div>
          </div>
        </div>
      </div>

      {selectedTask && (
        <Task 
          isOpen={isTaskOpen} 
          onClose={handleCloseTask} 
          taskData={selectedTask} 
          onStartLesson={
            // Verifica se √© a tarefa de aut√¥mato para chamar a fun√ß√£o correta
            selectedTask.title.includes("Constru√ß√£o de Aut√¥mato") 
              ? handleStartAutomatonLesson 
              : handleStartLesson
          } 
        />
      )}
    </div>
  )
}

export default Path_player